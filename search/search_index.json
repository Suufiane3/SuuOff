{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Les langages de programmation \ud83d\udd76\ufe0f \u2693\ufe0e Qu'est-ce qu'un langage de programmation \u2693\ufe0e Un langage de programmation est une notation conventionnelle destin\u00e9e \u00e0 formuler des algorithmes et produire des programmes informatiques qui les appliquent. D'une mani\u00e8re similaire \u00e0 une langue naturelle, un langage de programmation est compos\u00e9 d'un alphabet , d'un vocabulaire , de r\u00e8gles de grammaire , de significations , mais aussi d'un environnement de traduction cens\u00e9 rendre sa syntaxe compr\u00e9hensible par la machine. Les langages de programmation permettent de d\u00e9crire d'une part les structures des donn\u00e9es qui seront manipul\u00e9es par l'appareil informatique, et d'autre part d'indiquer comment sont effectu\u00e9es les manipulations, selon quels algorithmes. Ils servent de moyens de communication par lesquels le programmeur communique avec l'ordinateur, mais aussi avec d'autres programmeurs ; les programmes \u00e9tant d'ordinaire \u00e9crits, lus, compris et modifi\u00e9s par une \u00e9quipe de programmeurs. Un langage de programmation est mis en \u0153uvre par un traducteur automatique : compilateur ou interpr\u00e8te . Un compilateur est un programme informatique qui transforme dans un premier temps un code source \u00e9crit dans un langage de programmation donn\u00e9 en un code cible qui pourra \u00eatre directement ex\u00e9cut\u00e9 par un ordinateur, \u00e0 savoir un programme en langage machine ou en code interm\u00e9diaire , tandis que l\u2019interpr\u00e8te r\u00e9alise cette traduction \u00ab \u00e0 la vol\u00e9e \u00bb. Les langages de programmation offrent diff\u00e9rentes possibilit\u00e9s d' abstraction et une notation proche de l' alg\u00e8bre , permettant de d\u00e9crire de mani\u00e8re concise et facile \u00e0 saisir les op\u00e9rations de manipulation de donn\u00e9es et l'\u00e9volution du d\u00e9roulement du programme en fonction des situations. La possibilit\u00e9 d'\u00e9criture abstraite lib\u00e8re l'esprit du programmeur d'un travail superflu, notamment de prise en compte des sp\u00e9cificit\u00e9s du mat\u00e9riel informatique, et lui permet ainsi de se concentrer sur des probl\u00e8mes plus avanc\u00e9s. Chaque langage de programmation supporte une ou plusieurs approches de la programmation \u2013 paradigmes . Les notions induisant le paradigme font partie du langage de programmation et permettent au programmeur d'exprimer dans le langage une solution qui a \u00e9t\u00e9 imagin\u00e9e selon ce paradigme. Les premiers langages de programmation ont \u00e9t\u00e9 cr\u00e9\u00e9s dans les ann\u00e9es 1950 en m\u00eame temps que l'av\u00e8nement des ordinateurs . Cependant, de nombreux concepts de programmation ont \u00e9t\u00e9 initi\u00e9s par un langage ou parfois plusieurs langages, avant d'\u00eatre am\u00e9lior\u00e9s puis \u00e9tendus dans les langages suivants. La plupart du temps la conception d'un langage de programmation a \u00e9t\u00e9 fortement influenc\u00e9e par l'exp\u00e9rience acquise avec les langages pr\u00e9c\u00e9dents. Les langages de programmation peuvent \u00eatre classifi\u00e9s de nombreuses mani\u00e8res : \u2693\ufe0e g\u00e9n\u00e9raliste/sp\u00e9cialis\u00e9, haut niveau/bas niveau, interpr\u00e9t\u00e9/compil\u00e9, avec/sans gestion de m\u00e9moire automatis\u00e9e, avec/sans syst\u00e8me de gestion d'exceptions, \u00e0 typage fort/typage faible, \u00e0 typage statique/typage dynamique, \u00e0 syntaxe fixe/extensible ; non objet/orient\u00e9 objet/purement objet, imp\u00e9ratif/fonctionnel/d\u00e9claratif, fonctionnel pur/impur, etc. Ci-dessous, je liste les langages les plus connus (j'ai mis entre parenth\u00e8ses certains langages d\u00e9riv\u00e9s ou les extensions requises). \u2693\ufe0e Classification des langages g\u00e9n\u00e9ralistes Nom Imp\u00e9ratif Fonctionnel Objets D\u00e9claratif Concurrent 4D \u274e ActionScript \u274e \u274e Ada \u274e \u274e Algol \u274e Anubis \u274e \u274e APL \u274e APL2 Assembleur \u274e BASIC \u274e (Visual Basic) Caml \u274e \u274e CDuce \u274e C \u274e C++ \u274e \u274e C# \u274e \u274e COBOL \u274e COBOL 2002 ColdFusion \u274e Common Lisp \u274e \u274e \u274e (screamer) DarkBasic \u274e \u274e Eiffel \u274e \u274e Erlang \u274e \u274e Fortran \u274e Forth \u274e Haskell \u274e (O'Haskell) ICON \u274e Java \u274e \u274e Limbo \u274e \u274e Logo \u274e ML \u274e \u274e (Objective CAML) Natural \u274e Objective C \u274e \u274e Oz \u274e \u274e \u274e \u274e \u274e Pascal \u274e (Delphi, Kylix) Perl \u274e \u274e \u274e PHP \u274e (PHP 4+) PL/I \u274e Python \u274e \u274e \u274e Stackless Prolog \u274e RPG ou GAP \u274e ColdFusion \u274e Ruby \u274e \u274e \u274e Scala \u274e \u274e \u274e \u274e Scheme \u274e \u274e (TinyClos) gambit, termite Simula \u274e \u274e Smalltalk \u274e \u274e Tcl \u274e \u274e (Incr Tcl, Snit, XOTcl) W-Langage \u274e X (WinDev, WebDev, WinDev Mobile) XSLT \u274e \u274e Maintenant jetter un oeil sur les langages les plus utilis\u00e9s \u27a1\ufe0f","title":"Les langages de programmation"},{"location":"#les-langages-de-programmation","text":"","title":"Les langages de programmation \ud83d\udd76\ufe0f"},{"location":"#quest-ce-quun-langage-de-programmation","text":"Un langage de programmation est une notation conventionnelle destin\u00e9e \u00e0 formuler des algorithmes et produire des programmes informatiques qui les appliquent. D'une mani\u00e8re similaire \u00e0 une langue naturelle, un langage de programmation est compos\u00e9 d'un alphabet , d'un vocabulaire , de r\u00e8gles de grammaire , de significations , mais aussi d'un environnement de traduction cens\u00e9 rendre sa syntaxe compr\u00e9hensible par la machine. Les langages de programmation permettent de d\u00e9crire d'une part les structures des donn\u00e9es qui seront manipul\u00e9es par l'appareil informatique, et d'autre part d'indiquer comment sont effectu\u00e9es les manipulations, selon quels algorithmes. Ils servent de moyens de communication par lesquels le programmeur communique avec l'ordinateur, mais aussi avec d'autres programmeurs ; les programmes \u00e9tant d'ordinaire \u00e9crits, lus, compris et modifi\u00e9s par une \u00e9quipe de programmeurs. Un langage de programmation est mis en \u0153uvre par un traducteur automatique : compilateur ou interpr\u00e8te . Un compilateur est un programme informatique qui transforme dans un premier temps un code source \u00e9crit dans un langage de programmation donn\u00e9 en un code cible qui pourra \u00eatre directement ex\u00e9cut\u00e9 par un ordinateur, \u00e0 savoir un programme en langage machine ou en code interm\u00e9diaire , tandis que l\u2019interpr\u00e8te r\u00e9alise cette traduction \u00ab \u00e0 la vol\u00e9e \u00bb. Les langages de programmation offrent diff\u00e9rentes possibilit\u00e9s d' abstraction et une notation proche de l' alg\u00e8bre , permettant de d\u00e9crire de mani\u00e8re concise et facile \u00e0 saisir les op\u00e9rations de manipulation de donn\u00e9es et l'\u00e9volution du d\u00e9roulement du programme en fonction des situations. La possibilit\u00e9 d'\u00e9criture abstraite lib\u00e8re l'esprit du programmeur d'un travail superflu, notamment de prise en compte des sp\u00e9cificit\u00e9s du mat\u00e9riel informatique, et lui permet ainsi de se concentrer sur des probl\u00e8mes plus avanc\u00e9s. Chaque langage de programmation supporte une ou plusieurs approches de la programmation \u2013 paradigmes . Les notions induisant le paradigme font partie du langage de programmation et permettent au programmeur d'exprimer dans le langage une solution qui a \u00e9t\u00e9 imagin\u00e9e selon ce paradigme. Les premiers langages de programmation ont \u00e9t\u00e9 cr\u00e9\u00e9s dans les ann\u00e9es 1950 en m\u00eame temps que l'av\u00e8nement des ordinateurs . Cependant, de nombreux concepts de programmation ont \u00e9t\u00e9 initi\u00e9s par un langage ou parfois plusieurs langages, avant d'\u00eatre am\u00e9lior\u00e9s puis \u00e9tendus dans les langages suivants. La plupart du temps la conception d'un langage de programmation a \u00e9t\u00e9 fortement influenc\u00e9e par l'exp\u00e9rience acquise avec les langages pr\u00e9c\u00e9dents.","title":"Qu'est-ce qu'un langage de programmation"},{"location":"#les-langages-de-programmation-peuvent-etre-classifies-de-nombreuses-manieres","text":"g\u00e9n\u00e9raliste/sp\u00e9cialis\u00e9, haut niveau/bas niveau, interpr\u00e9t\u00e9/compil\u00e9, avec/sans gestion de m\u00e9moire automatis\u00e9e, avec/sans syst\u00e8me de gestion d'exceptions, \u00e0 typage fort/typage faible, \u00e0 typage statique/typage dynamique, \u00e0 syntaxe fixe/extensible ; non objet/orient\u00e9 objet/purement objet, imp\u00e9ratif/fonctionnel/d\u00e9claratif, fonctionnel pur/impur, etc.","title":"Les langages de programmation peuvent \u00eatre classifi\u00e9s de nombreuses mani\u00e8res :"},{"location":"#ci-dessous-je-liste-les-langages-les-plus-connus-jai-mis-entre-parentheses-certains-langages-derives-ou-les-extensions-requises","text":"Classification des langages g\u00e9n\u00e9ralistes Nom Imp\u00e9ratif Fonctionnel Objets D\u00e9claratif Concurrent 4D \u274e ActionScript \u274e \u274e Ada \u274e \u274e Algol \u274e Anubis \u274e \u274e APL \u274e APL2 Assembleur \u274e BASIC \u274e (Visual Basic) Caml \u274e \u274e CDuce \u274e C \u274e C++ \u274e \u274e C# \u274e \u274e COBOL \u274e COBOL 2002 ColdFusion \u274e Common Lisp \u274e \u274e \u274e (screamer) DarkBasic \u274e \u274e Eiffel \u274e \u274e Erlang \u274e \u274e Fortran \u274e Forth \u274e Haskell \u274e (O'Haskell) ICON \u274e Java \u274e \u274e Limbo \u274e \u274e Logo \u274e ML \u274e \u274e (Objective CAML) Natural \u274e Objective C \u274e \u274e Oz \u274e \u274e \u274e \u274e \u274e Pascal \u274e (Delphi, Kylix) Perl \u274e \u274e \u274e PHP \u274e (PHP 4+) PL/I \u274e Python \u274e \u274e \u274e Stackless Prolog \u274e RPG ou GAP \u274e ColdFusion \u274e Ruby \u274e \u274e \u274e Scala \u274e \u274e \u274e \u274e Scheme \u274e \u274e (TinyClos) gambit, termite Simula \u274e \u274e Smalltalk \u274e \u274e Tcl \u274e \u274e (Incr Tcl, Snit, XOTcl) W-Langage \u274e X (WinDev, WebDev, WinDev Mobile) XSLT \u274e \u274e Maintenant jetter un oeil sur les langages les plus utilis\u00e9s \u27a1\ufe0f","title":"Ci-dessous, je liste les langages les plus connus (j'ai mis entre parenth\u00e8ses certains langages d\u00e9riv\u00e9s ou les extensions requises)."},{"location":"conclusion/","text":"\ud83c\udfa9 \u2693\ufe0e Et voil\u00e0 \ud83c\udf89 \u2693\ufe0e Enfin \u203c\ufe0f A pr\u00e9sent vous savez tout pour vous lancer \ud83c\udf8a, l'aventure ne fait que commencer ! Le monde de la programmation vous attend alors n'h\u00e9sitez pas et n'abandonnez rien. --> revoir : langages de programmation \u2b05\ufe0f langages les plus utilis\u00e9s \u2b05\ufe0f Apprendre \u00e0 coder \u2b05\ufe0f","title":"Conclusion"},{"location":"conclusion/#_1","text":"","title":"\ud83c\udfa9"},{"location":"conclusion/#et-voila","text":"Enfin \u203c\ufe0f A pr\u00e9sent vous savez tout pour vous lancer \ud83c\udf8a, l'aventure ne fait que commencer ! Le monde de la programmation vous attend alors n'h\u00e9sitez pas et n'abandonnez rien. --> revoir : langages de programmation \u2b05\ufe0f langages les plus utilis\u00e9s \u2b05\ufe0f Apprendre \u00e0 coder \u2b05\ufe0f","title":"Et voil\u00e0 \ud83c\udf89"},{"location":"learn%20to%20code/","text":"Apprendre \u00e0 coder \ud83c\udf10 \u2693\ufe0e Commencer \u00e0 coder ? \u2693\ufe0e Je veux apprendre Je veux m'exercer Apprendre la programmation informatique ne diff\u00e8re pas de l\u2019apprentissage de n\u2019importe quelle autre discipline. Cela vous demandera de la pers\u00e9v\u00e9rance et de la curiosit\u00e9 pour trouver les solutions aux probl\u00e8mes que vous rencontrerez. Cela n\u00e9cessitera aussi une bonne dose d\u2019 autonomie . Cette qualit\u00e9 vous sera demand\u00e9e chaque jour durant votre apprentissage, l\u2019informaticien devant suivre de lui-m\u00eame les \u00e9volutions technologiques de son m\u00e9tier. Les portes s'ouvriront alors \u00e0 vous. Si vous vous \u00eates \u00e0 peine lanc\u00e9 dans la programmation, ou que vous ne souhaitez pas installer divers logiciel sur votre machine, vous pouvez tr\u00e8s bien coder dans votre navigateur ! Basthon est l'alternative parfaite \u2935\ufe0f Sinon, opter pour un environnement de d\u00e9veloppement (IDE) sans t\u00e9l\u00e9m\u00e9trie comme Visual Studio Code et plus pr\u00e9cis\u00e9ment VScodium. Notez qu'il faut poss\u00e9der un ordinateur pour installer VScodium. plus d'info sur le site officiel de VScodium --> Vous pouvez d\u00e9buter, par exemple, \u00e0 programmer en python sur le site France IOI \u00c0 quoi \u00e7a ressemble... ? \u2693\ufe0e bloc de codes 1 python C++ JavaScript C# \ud83d\udc0d Script Python name1 , name2 = input () . split ( \" \" ) names = [ name1 , name2 ] tot_names = [ 0 , 0 ] def name_in_num ( name ): for i in range ( len ( name )): name_in_upper_case = name . upper () name_in_nb = ord ( name_in_upper_case [ i ]) - 65 tot_names [ x ] += name_in_nb def love_indice (): while tot_names [ x ] > 9 : tot_names_split = list ( str ( tot_names [ x ])) tot_names [ x ] = 0 for i in range ( len ( tot_names_split )): tot_names [ x ] += int ( tot_names_split [ i ]) for x in range ( 2 ): name_in_num ( names [ x ]) love_indice () print ( tot_names [ 0 ], tot_names [ 1 ]) C++ #include <iostream> #include <string> #include <algorithm> #include <vector> using namespace std ; int name_in_num ( string name ) { int total = 0 ; for ( int i = 0 ; i < name . length (); i ++ ) { name [ i ] = toupper ( name [ i ]); total += name [ i ] - 'A' ; } while ( total > 9 ) { vector < int > total_vector ; while ( total > 0 ) { total_vector . push_back ( total % 10 ); total /= 10 ; } total = 0 ; for ( int i = 0 ; i < total_vector . size (); i ++ ) { total += total_vector [ i ]; } } return total ; } int main () { string name1 , name2 ; cin >> name1 >> name2 ; int total1 = name_in_num ( name1 ); int total2 JavaScript var names = prompt ( \"Enter names\" ). split ( \" \" ); var total = [ 0 , 0 ]; function nameInNum ( name ) { for ( var i = 0 ; i < name . length ; i ++ ) { var nameInUpperCase = name . toUpperCase (); var nameInNum = nameInUpperCase . charCodeAt ( i ) - 65 ; total [ x ] += nameInNum ; } } function loveIndex () { while ( total [ x ] > 9 ) { var totalSplit = total [ x ]. toString (). split ( \"\" ); total [ x ] = 0 ; for ( var i = 0 ; i < totalSplit . length ; i ++ ) { total [ x ] += parseInt ( totalSplit [ i ]); } } } for ( var x = 0 ; x < 2 ; x ++ ) { nameInNum ( names [ x ]); loveIndex (); } alert ( total [ 0 ] + \" \" + total [ 1 ]); C# name1 , name2 = input (). split ( \" \" ) names = [ name1 , name2 ] tot_names = [ 0 , 0 ] def name_in_num ( name ): for i in range ( len ( name )): name_in_upper_case = name . ToUpper () name_in_nb = Convert . ToInt32 ( name_in_upper_case [ i ]) - 65 tot_names [ x ] += name_in_nb def love_indice (): while tot_names [ x ] > 9 : tot_names_split = tot_names [ x ]. ToString (). ToCharArray () tot_names [ x ] = 0 for i in range ( len ( tot_names_split )): tot_names [ x ] += Convert . ToInt32 ( tot_names_split [ i ]) for x in range ( 2 ): name_in_num ( names [ x ]) love_indice () Console . WriteLine ( tot_names [ 0 ], tot_names ) Petite d\u00e9monstration...\ud83e\udd13 copiez le code suivant avec Ctrl \uff0b C , Ctrl \uff0b V dans votre IDE ensuite executez le code r\u00e9sultat \ud83d\udc0d Script Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 import os from math import cos , sin import pygame import colorsys WHITE = ( 255 , 255 , 255 ) BLACK = ( 0 , 0 , 0 ) hue = 0 os . environ [ 'SDL_VIDEO_CENTERED' ] = '1' RES = WIDTH , HEIGHT = 800 , 800 FPS = 60 pixel_width = 20 pixel_height = 20 x_pixel = 0 y_pixel = 0 screen_width = WIDTH // pixel_width screen_height = HEIGHT // pixel_height screen_size = screen_width * screen_height A , B = 0 , 0 theta_spacing = 10 phi_spacing = 3 chars = \".,-~:;=!*#$@\" R1 = 10 R2 = 20 K2 = 200 K1 = screen_height * K2 * 3 / ( 8 * ( R1 + R2 )) pygame . init () screen = pygame . display . set_mode ( RES ) clock = pygame . time . Clock () font = pygame . font . SysFont ( 'Arial' , 20 , bold = True ) def hsv2rgb ( h , s , v ): return tuple ( round ( i * 255 ) for i in colorsys . hsv_to_rgb ( h , s , v )) def text_display ( char , x , y ): text = font . render ( str ( char ), True , hsv2rgb ( hue , 1 , 1 )) text_rect = text . get_rect ( center = ( x , y )) screen . blit ( text , text_rect ) k = 0 paused = False running = True while running : clock . tick ( FPS ) pygame . display . set_caption ( \"FPS: {:.2f} \" . format ( clock . get_fps ())) screen . fill ( BLACK ) output = [ ' ' ] * screen_size zbuffer = [ 0 ] * screen_size for theta in range ( 0 , 628 , theta_spacing ): for phi in range ( 0 , 628 , phi_spacing ): cosA = cos ( A ) sinA = sin ( A ) cosB = cos ( B ) sinB = sin ( B ) costheta = cos ( theta ) sintheta = sin ( theta ) cosphi = cos ( phi ) sinphi = sin ( phi ) circlex = R2 + R1 * costheta circley = R1 * sintheta x = circlex * ( cosB * cosphi + sinA * sinB * sinphi ) - circley * cosA * sinB y = circlex * ( sinB * cosphi - sinA * cosB * sinphi ) + circley * cosA * cosB z = K2 + cosA * circlex * sinphi + circley * sinA ooz = 1 / z xp = int ( screen_width / 2 + K1 * ooz * x ) yp = int ( screen_height / 2 - K1 * ooz * y ) position = xp + screen_width * yp L = cosphi * costheta * sinB - cosA * costheta * sinphi - sinA * sintheta + cosB * ( cosA * sintheta - costheta * sinA * sinphi ) if ooz > zbuffer [ position ]: zbuffer [ position ] = ooz luminance_index = int ( L * 8 ) output [ position ] = chars [ luminance_index if luminance_index > 0 else 0 ] for i in range ( screen_height ): y_pixel += pixel_height for j in range ( screen_width ): x_pixel += pixel_width text_display ( output [ k ], x_pixel , y_pixel ) k += 1 x_pixel = 0 y_pixel = 0 k = 0 A += 0.15 B += 0.035 hue += 0.005 if not paused : pygame . display . update () for event in pygame . event . get (): if event . type == pygame . QUIT : running = False if event . type == pygame . KEYDOWN : if event . key == pygame . K_ESCAPE : running = False if event . key == pygame . K_SPACE : paused = not paused \u00e7a sert \u00e0 rien mais c'est fun ! Mais avant tout, les maths ... \u2693\ufe0e les math\u00e9matiques Programmer c'est appliquer des concepts math\u00e9matiques, l\u2019informatique est une mati\u00e8re et une discipline d\u00e9coulant directement des math\u00e9matiques. En effet, les premiers informaticiens \u00e9taient des matheux qui ont voulu automatiser certains processus de calculs. Les ordinateurs et l\u2019informatique \u00e9taient n\u00e9s. Vous voulez simuler les lois de gravitation ? boom\ud83d\udca5, des maths ! \\[ F_{A/B} = F_{B/A} = G{M_{A} M_{B} \\over d^2} \\] ou encore calculer l'\u00e9cart type ! \\[ \\sigma = \\sqrt{ \\frac{1}{N} \\sum_{i=1}^N (x_i -\\mu)^2} \\] N'ayez crainte Et puis si j'y arrive alors vous aussi car c'est \u00e0 la port\u00e9e de tous \u2615. Savoir manipuler les maths n'est pas si horrible que vous ne le croyez, c'est un cercle vicieux mais pas sans issue ! graph LR A[Curiosit\u00e9] --> B{\u00e9tudie les maths}; B -->|Comprend| C[apprentissage, r\u00e9ussite]; C -->|Aime, progr\u00e8s| B B -->|lacunes?| D[compliqu\u00e9, abondonne...] D -->|pers\u00e9v\u00e8re?| B Ces codes ont la m\u00eame fonctions mais dans diff\u00e9rents langages, solution du probl\u00e8me Nombre d'amour du site France IOI \u21a9","title":"Apprendre \u00e0 coder"},{"location":"learn%20to%20code/#apprendre-a-coder","text":"","title":"Apprendre \u00e0 coder \ud83c\udf10"},{"location":"learn%20to%20code/#commencer-a-coder","text":"Je veux apprendre Je veux m'exercer Apprendre la programmation informatique ne diff\u00e8re pas de l\u2019apprentissage de n\u2019importe quelle autre discipline. Cela vous demandera de la pers\u00e9v\u00e9rance et de la curiosit\u00e9 pour trouver les solutions aux probl\u00e8mes que vous rencontrerez. Cela n\u00e9cessitera aussi une bonne dose d\u2019 autonomie . Cette qualit\u00e9 vous sera demand\u00e9e chaque jour durant votre apprentissage, l\u2019informaticien devant suivre de lui-m\u00eame les \u00e9volutions technologiques de son m\u00e9tier. Les portes s'ouvriront alors \u00e0 vous. Si vous vous \u00eates \u00e0 peine lanc\u00e9 dans la programmation, ou que vous ne souhaitez pas installer divers logiciel sur votre machine, vous pouvez tr\u00e8s bien coder dans votre navigateur ! Basthon est l'alternative parfaite \u2935\ufe0f Sinon, opter pour un environnement de d\u00e9veloppement (IDE) sans t\u00e9l\u00e9m\u00e9trie comme Visual Studio Code et plus pr\u00e9cis\u00e9ment VScodium. Notez qu'il faut poss\u00e9der un ordinateur pour installer VScodium. plus d'info sur le site officiel de VScodium --> Vous pouvez d\u00e9buter, par exemple, \u00e0 programmer en python sur le site France IOI","title":"Commencer \u00e0 coder ?"},{"location":"learn%20to%20code/#a-quoi-ca-ressemble","text":"bloc de codes 1 python C++ JavaScript C# \ud83d\udc0d Script Python name1 , name2 = input () . split ( \" \" ) names = [ name1 , name2 ] tot_names = [ 0 , 0 ] def name_in_num ( name ): for i in range ( len ( name )): name_in_upper_case = name . upper () name_in_nb = ord ( name_in_upper_case [ i ]) - 65 tot_names [ x ] += name_in_nb def love_indice (): while tot_names [ x ] > 9 : tot_names_split = list ( str ( tot_names [ x ])) tot_names [ x ] = 0 for i in range ( len ( tot_names_split )): tot_names [ x ] += int ( tot_names_split [ i ]) for x in range ( 2 ): name_in_num ( names [ x ]) love_indice () print ( tot_names [ 0 ], tot_names [ 1 ]) C++ #include <iostream> #include <string> #include <algorithm> #include <vector> using namespace std ; int name_in_num ( string name ) { int total = 0 ; for ( int i = 0 ; i < name . length (); i ++ ) { name [ i ] = toupper ( name [ i ]); total += name [ i ] - 'A' ; } while ( total > 9 ) { vector < int > total_vector ; while ( total > 0 ) { total_vector . push_back ( total % 10 ); total /= 10 ; } total = 0 ; for ( int i = 0 ; i < total_vector . size (); i ++ ) { total += total_vector [ i ]; } } return total ; } int main () { string name1 , name2 ; cin >> name1 >> name2 ; int total1 = name_in_num ( name1 ); int total2 JavaScript var names = prompt ( \"Enter names\" ). split ( \" \" ); var total = [ 0 , 0 ]; function nameInNum ( name ) { for ( var i = 0 ; i < name . length ; i ++ ) { var nameInUpperCase = name . toUpperCase (); var nameInNum = nameInUpperCase . charCodeAt ( i ) - 65 ; total [ x ] += nameInNum ; } } function loveIndex () { while ( total [ x ] > 9 ) { var totalSplit = total [ x ]. toString (). split ( \"\" ); total [ x ] = 0 ; for ( var i = 0 ; i < totalSplit . length ; i ++ ) { total [ x ] += parseInt ( totalSplit [ i ]); } } } for ( var x = 0 ; x < 2 ; x ++ ) { nameInNum ( names [ x ]); loveIndex (); } alert ( total [ 0 ] + \" \" + total [ 1 ]); C# name1 , name2 = input (). split ( \" \" ) names = [ name1 , name2 ] tot_names = [ 0 , 0 ] def name_in_num ( name ): for i in range ( len ( name )): name_in_upper_case = name . ToUpper () name_in_nb = Convert . ToInt32 ( name_in_upper_case [ i ]) - 65 tot_names [ x ] += name_in_nb def love_indice (): while tot_names [ x ] > 9 : tot_names_split = tot_names [ x ]. ToString (). ToCharArray () tot_names [ x ] = 0 for i in range ( len ( tot_names_split )): tot_names [ x ] += Convert . ToInt32 ( tot_names_split [ i ]) for x in range ( 2 ): name_in_num ( names [ x ]) love_indice () Console . WriteLine ( tot_names [ 0 ], tot_names ) Petite d\u00e9monstration...\ud83e\udd13 copiez le code suivant avec Ctrl \uff0b C , Ctrl \uff0b V dans votre IDE ensuite executez le code r\u00e9sultat \ud83d\udc0d Script Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 import os from math import cos , sin import pygame import colorsys WHITE = ( 255 , 255 , 255 ) BLACK = ( 0 , 0 , 0 ) hue = 0 os . environ [ 'SDL_VIDEO_CENTERED' ] = '1' RES = WIDTH , HEIGHT = 800 , 800 FPS = 60 pixel_width = 20 pixel_height = 20 x_pixel = 0 y_pixel = 0 screen_width = WIDTH // pixel_width screen_height = HEIGHT // pixel_height screen_size = screen_width * screen_height A , B = 0 , 0 theta_spacing = 10 phi_spacing = 3 chars = \".,-~:;=!*#$@\" R1 = 10 R2 = 20 K2 = 200 K1 = screen_height * K2 * 3 / ( 8 * ( R1 + R2 )) pygame . init () screen = pygame . display . set_mode ( RES ) clock = pygame . time . Clock () font = pygame . font . SysFont ( 'Arial' , 20 , bold = True ) def hsv2rgb ( h , s , v ): return tuple ( round ( i * 255 ) for i in colorsys . hsv_to_rgb ( h , s , v )) def text_display ( char , x , y ): text = font . render ( str ( char ), True , hsv2rgb ( hue , 1 , 1 )) text_rect = text . get_rect ( center = ( x , y )) screen . blit ( text , text_rect ) k = 0 paused = False running = True while running : clock . tick ( FPS ) pygame . display . set_caption ( \"FPS: {:.2f} \" . format ( clock . get_fps ())) screen . fill ( BLACK ) output = [ ' ' ] * screen_size zbuffer = [ 0 ] * screen_size for theta in range ( 0 , 628 , theta_spacing ): for phi in range ( 0 , 628 , phi_spacing ): cosA = cos ( A ) sinA = sin ( A ) cosB = cos ( B ) sinB = sin ( B ) costheta = cos ( theta ) sintheta = sin ( theta ) cosphi = cos ( phi ) sinphi = sin ( phi ) circlex = R2 + R1 * costheta circley = R1 * sintheta x = circlex * ( cosB * cosphi + sinA * sinB * sinphi ) - circley * cosA * sinB y = circlex * ( sinB * cosphi - sinA * cosB * sinphi ) + circley * cosA * cosB z = K2 + cosA * circlex * sinphi + circley * sinA ooz = 1 / z xp = int ( screen_width / 2 + K1 * ooz * x ) yp = int ( screen_height / 2 - K1 * ooz * y ) position = xp + screen_width * yp L = cosphi * costheta * sinB - cosA * costheta * sinphi - sinA * sintheta + cosB * ( cosA * sintheta - costheta * sinA * sinphi ) if ooz > zbuffer [ position ]: zbuffer [ position ] = ooz luminance_index = int ( L * 8 ) output [ position ] = chars [ luminance_index if luminance_index > 0 else 0 ] for i in range ( screen_height ): y_pixel += pixel_height for j in range ( screen_width ): x_pixel += pixel_width text_display ( output [ k ], x_pixel , y_pixel ) k += 1 x_pixel = 0 y_pixel = 0 k = 0 A += 0.15 B += 0.035 hue += 0.005 if not paused : pygame . display . update () for event in pygame . event . get (): if event . type == pygame . QUIT : running = False if event . type == pygame . KEYDOWN : if event . key == pygame . K_ESCAPE : running = False if event . key == pygame . K_SPACE : paused = not paused \u00e7a sert \u00e0 rien mais c'est fun !","title":"\u00c0 quoi \u00e7a ressemble... ?"},{"location":"learn%20to%20code/#mais-avant-tout-les-maths","text":"les math\u00e9matiques Programmer c'est appliquer des concepts math\u00e9matiques, l\u2019informatique est une mati\u00e8re et une discipline d\u00e9coulant directement des math\u00e9matiques. En effet, les premiers informaticiens \u00e9taient des matheux qui ont voulu automatiser certains processus de calculs. Les ordinateurs et l\u2019informatique \u00e9taient n\u00e9s. Vous voulez simuler les lois de gravitation ? boom\ud83d\udca5, des maths ! \\[ F_{A/B} = F_{B/A} = G{M_{A} M_{B} \\over d^2} \\] ou encore calculer l'\u00e9cart type ! \\[ \\sigma = \\sqrt{ \\frac{1}{N} \\sum_{i=1}^N (x_i -\\mu)^2} \\] N'ayez crainte Et puis si j'y arrive alors vous aussi car c'est \u00e0 la port\u00e9e de tous \u2615. Savoir manipuler les maths n'est pas si horrible que vous ne le croyez, c'est un cercle vicieux mais pas sans issue ! graph LR A[Curiosit\u00e9] --> B{\u00e9tudie les maths}; B -->|Comprend| C[apprentissage, r\u00e9ussite]; C -->|Aime, progr\u00e8s| B B -->|lacunes?| D[compliqu\u00e9, abondonne...] D -->|pers\u00e9v\u00e8re?| B Ces codes ont la m\u00eame fonctions mais dans diff\u00e9rents langages, solution du probl\u00e8me Nombre d'amour du site France IOI \u21a9","title":"Mais avant tout, les maths..."},{"location":"most%20used%20langage/","text":"Top 10 langages de programmation les plus utilis\u00e9s en 2022 \ud83d\udc31\u200d\ud83d\udcbb \u2693\ufe0e 1. JavaScript : le plus utilis\u00e9 c\u00f4t\u00e9 client \u2693\ufe0e M\u00eame si le HTML et le CSS sont tr\u00e8s utilis\u00e9s pour le d\u00e9veloppement Web, JavaScript reste un langage tr\u00e8s populaire et tr\u00e8s demand\u00e9. La principale raison, c\u2019est qu\u2019il est polyvalent et peut \u00eatre utilis\u00e9 pour divers projets : applications mobiles, serveurs, sites web, etc. Pour la cr\u00e9ation des sites Web, JavaScript est principalement utilis\u00e9 pour cr\u00e9er des visuels tr\u00e8s attractifs et des \u00e9l\u00e9ments interactifs c\u00f4t\u00e9 client. Un de ses principaux atouts est qu\u2019il permet de modifier les donn\u00e9es affich\u00e9es aux utilisateurs directement dans un navigateur. \u00c0 ce jour, aucun concurrent s\u00e9rieux n\u2019existe encore pour ces deux derni\u00e8res fonctions. Par ailleurs, ce langage de programmation est utilis\u00e9 dans le d\u00e9veloppement des jeux vid\u00e9o sur navigateur. Ceci est surtout possible gr\u00e2ce aux biblioth\u00e8ques graphiques 2D et 3D ainsi que les fonctionnalit\u00e9s avanc\u00e9es de HTML5. Enfin, on se rend compte que ce langage n\u2019est pas pr\u00eat de dispara\u00eetre. Il est d\u2019ailleurs facile \u00e0 apprendre et ne n\u00e9cessite aucune compilation. 2. Python : le plus facile pour d\u00e9buter le d\u00e9veloppement \u2693\ufe0e Aujourd\u2019hui, Python repr\u00e9sente un langage incontournable en d\u00e9veloppement informatique. Rares sont les d\u00e9veloppeurs qui peuvent affirmer ne pas pouvoir coder en Python. C\u2019est d\u2019ailleurs le langage avec lequel commence la majorit\u00e9 des d\u00e9butants en code informatique. La principale raison est que ce langage dispose d\u2019une syntaxe facile \u00e0 comprendre et \u00e0 retenir, en plus d\u2019\u00eatre un logiciel libre. Ce langage de coding dispose par ailleurs d\u2019une communaut\u00e9 tr\u00e8s active qui ne cesse de grandir. Python est un langage de code tr\u00e8s \u00e9conomique en ressources et en temps. Sa polyvalence a aussi contribu\u00e9 \u00e0 sa notori\u00e9t\u00e9. Il peut en effet \u00eatre utilis\u00e9 pour concevoir de nombreuses choses : logiciels big data, d\u00e9veloppement web, cr\u00e9ation de jeux vid\u00e9o, intelligence artificielle, etc. Les d\u00e9veloppeurs qui ma\u00eetrisent parfaitement ce langage sont tr\u00e8s recherch\u00e9s sur le march\u00e9. Selon Payscale, ces derniers peuvent toucher jusqu\u2019\u00e0 68.000 euros par an. 3. Java : le plus connu de tous \u2693\ufe0e Java ressemble \u00e0 JavaScript, mais tenez-vous bien, les deux sont bien diff\u00e9rents. Java est un langage de programmation \u00e0 usage g\u00e9n\u00e9ral et orient\u00e9 objet. Il est con\u00e7u de telle sorte \u00e0 pouvoir \u00eatre ex\u00e9cut\u00e9 sans \u00eatre m\u00e9lang\u00e9 \u00e0 un autre langage. Java est un ancien langage qui a permis de cr\u00e9er les premiers jeux mobiles. Aujourd\u2019hui, il n\u2019est plus aussi pr\u00e9sent dans le Gaming, mais il continue \u00e0 jouer un r\u00f4le majeur puisqu\u2019il a permis la conception de nombreux frameworks. Au-del\u00e0 des jeux, ce langage informatique permet de concevoir des logiciels pour appareils mobiles, les sites web, l\u2019internet des objets, ou encore pour cr\u00e9er des jeux vid\u00e9o etc. Malgr\u00e9 son anciennet\u00e9, Java reste tr\u00e8s appr\u00e9ci\u00e9 des d\u00e9veloppeurs. C\u2019est en effet un langage s\u00e9curis\u00e9, mais difficile \u00e0 apprendre. 4. Go : l\u2019alternative \u00e0 Java cr\u00e9\u00e9e par Google \u2693\ufe0e La r\u00e9volution de l\u2019internet battait son plein au d\u00e9but du XXIe si\u00e8cle. Les jeunes s\u2019int\u00e9ressaient de plus en plus \u00e0 la programmation. Malheureusement, les langages populaires \u00e0 l\u2019\u00e9poque \u00e9taient difficiles \u00e0 cerner aux d\u00e9butants et il fallait adoucir les choses. C\u2019est dans cette optique qu\u2019une \u00e9quipe de Google lance en 2009 le langage Go. Go est un langage de programmation compil\u00e9 et imp\u00e9ratif. \u00c0 la base, il \u00e9tait destin\u00e9 au d\u00e9veloppement de sites web. Ainsi Go a servi \u00e0 la cr\u00e9ation des sites de g\u00e9ants tels que Facebook et BBC. Depuis, sa plateforme s\u2019est \u00e9largie pour s\u2019\u00e9tendre aux grands syst\u00e8mes, aux scripts ou encore aux applications. Si de nombreux d\u00e9veloppeurs privil\u00e9gient ce langage, c\u2019est principalement \u00e0 cause de sa performance. Il est l\u00e9ger, rapide pour la programmation \u00e0 grande \u00e9chelle et tr\u00e8s facile \u00e0 apprendre. \u00c0 part cela, Go est moins flexible et ses ressources sont tr\u00e8s rares. 5. Ruby : facile \u00e0 apprendre mais lent \u2693\ufe0e Ma\u00eetriser les fonctions pour \u00e9crire plus facilement les codes est le plus grand d\u00e9fi des d\u00e9veloppeurs. Quelques sp\u00e9cialistes ont voulu donc arranger les choses en cr\u00e9ant Ruby. Il s\u2019agit d\u2019un langage tr\u00e8s simple avec une syntaxe concise qui permet de d\u00e9velopper plus facilement. En back end comme en front end, ce langage fonctionne normalement. On l\u2019utilise pour du d\u00e9veloppement web, la cr\u00e9ation des applications web, des interfaces graphiques\u2026 Il n\u2019y a que sa lenteur qui est d\u00e9cri\u00e9e. Malgr\u00e9 qu\u2019il est enti\u00e8rement \u00e9crit en anglais, le langage Ruby ne pr\u00e9sente aucune difficult\u00e9. De m\u00eame, sa syntaxe est facile \u00e0 apprendre. \u00c0 cet effet, il est adapt\u00e9 pour un d\u00e9butant en d\u00e9veloppement en informatique. Il est vrai qu\u2019il manque encore de popularit\u00e9, mais la communaut\u00e9 qui s\u2019est form\u00e9e autour reste dynamique. 6. TypeScript : le langage libre et open source \u2693\ufe0e TypeScript est le langage informatique le plus r\u00e9cent de cette liste, puisqu\u2019il a vu le jour en 2012, sous l\u2019\u00e9gide de Microsoft. Libre et open source, il a \u00e9t\u00e9 cr\u00e9\u00e9 en vue de corriger les d\u00e9fauts de JavaScript. Il s\u2019agit d\u2019un langage dynamique, dont le code est transcompil\u00e9 en JavaScript. Ceci lui permet d\u2019\u00eatre d\u00e9chiffr\u00e9 par n\u2019importe quel navigateur. Que vous soyez un d\u00e9butant ou un pro de la programmation, sachez qu\u2019il est tr\u00e8s facile de coder en TypeScript. Vous pouvez vous en servir pour programmer des logiciels, des sites web, des applications web, etc. 7. C++ : l\u2019un des plus complexes \u00e0 apprendre pour la programmation informatique \u2693\ufe0e La premi\u00e8re version de ce langage informatique a vu le jour en 1983. Elle a \u00e9t\u00e9 l\u2019\u0153uvre de Bjarne Stroustrup. \u00c0 l\u2019\u00e9poque, C++ a \u00e9t\u00e9 con\u00e7u pour pallier les lacunes du tr\u00e8s ancien C. C\u2019est donc \u00e0 juste titre qu\u2019il a vol\u00e9 la vedette \u00e0 ce dernier pour devenir aujourd\u2019hui un des langages les plus utilis\u00e9s pour concevoir les applications. C++ est reconnu comme un langage tr\u00e8s complexe, mais surtout performant. Les d\u00e9veloppeurs s\u2019en servent pour travailler sous diff\u00e9rents paradigmes. \u00c0 titre d\u2019exemple, il est utilis\u00e9 dans la programmation orient\u00e9e objet, la programmation proc\u00e9durale, etc. Bref, vous comprenez qu\u2019on peut utiliser ce langage pour faire un peu de tout : applications mobiles, logiciels, jeux vid\u00e9o, iOT, navigateurs web, syst\u00e8me d\u2019exploitation\u2026 C++, c\u2019est la polyvalence en un mot. Cependant, il est extr\u00eamement difficile \u00e0 apprendre pour les d\u00e9butants. Si vous commencez en programmation, ce langage n\u2019est pas l\u2019id\u00e9al pour vous. 8. PHP : le plus populaire pour cr\u00e9er des sites web \u2693\ufe0e On l\u2019a cru mort \u00e0 une certaine \u00e9poque, mais le vieux PHP est revenu plus rajeuni depuis sa version 5.x. PHP est un langage informatique \u00e0 usage g\u00e9n\u00e9ral utilis\u00e9 c\u00f4t\u00e9 serveur. \u00c0 ce jour, il reste le langage le plus utilis\u00e9 sur le web, puisque 79% des sites web l\u2019utilisent. Pourquoi donc ? PHP a servi \u00e0 r\u00e9aliser des projets colossaux, \u00e0 l\u2019image de WordPress. N\u2019importe quel site qui est con\u00e7u avec ce CMS l\u2019utilise donc. M\u00eame s\u2019il a longtemps \u00e9t\u00e9 d\u00e9cri\u00e9 pour sa lenteur, PHP reste un langage puissant utilis\u00e9 pour assurer la stabilit\u00e9 d\u2019un site web. On l\u2019utilise \u00e9galement pour concevoir des plug-ins aux nombreux sites qui tournent sous WordPress. Il est connect\u00e9 \u00e0 une base de donn\u00e9es SQL qui peut \u00eatre facilement administrable via mySQL. En ce qui concerne son apprentissage, PHP est tr\u00e8s facile, \u00e0 l\u2019image du HTML et CSS. Et c\u2019est l\u00e0 tout son pi\u00e8ge. En raison de sa facilit\u00e9, les d\u00e9butants ont tendance \u00e0 le coder avec n\u00e9gligence. Cons\u00e9quence : des erreurs de compilation. 9. C# : flexible et puissant \u2693\ufe0e Tout comme le C++, le langage de programmation C# a vu le jour pour tenter de corriger les failles du C qui se faisait vieux et pour le rendre moderne. Mais au contraire du C++ plus complexe, C# est tr\u00e8s facile et tout aussi polyvalent. Ce dernier est \u00e9galement tr\u00e8s proche de Java \u00e0 qui il a emprunt\u00e9 sa syntaxe. C\u2019est en 2001 qu\u2019il a vu le jour sous la houlette de Microsoft. Le g\u00e9ant de l\u2019informatique a initialement con\u00e7u C# pour le d\u00e9veloppement sur sa plateforme .Net. Toutefois, il s\u2019agit d\u2019un langage multiplateforme. On peut ainsi s\u2019en servir pour le d\u00e9veloppement des logiciels, des applications web, des widgets, la conception de jeux vid\u00e9o, etc. Enfin, comparativement \u00e0 C++, C# reste un langage mod\u00e9r\u00e9ment facile \u00e0 apprendre. Si vous \u00eates d\u00e9butant et que vous avez de l\u2019endurance, vous pouvez vous y lancer. Mais si vous \u00eates un pro qui recherche de la puissance pour programmer, vaut mieux vous tourner vers le C++. 10. C : le plus vieux langage toujours utilis\u00e9 \u2693\ufe0e Aussi vieux (presque) que la programmation informatique, C est un langage informatique imp\u00e9ratif. Il a inspir\u00e9 de nombreux langages modernes et reste utilis\u00e9 par de nombreux d\u00e9veloppeurs, malgr\u00e9 son anciennet\u00e9. La raison, c\u2019est qu\u2019il est beaucoup plus simple et permet de d\u00e9velopper des applications capables de tourner sous plusieurs plateformes. C'est utilis\u00e9 pour d\u00e9velopper des logiciels, des syst\u00e8mes d\u2019exploitation, etc. Si vous souhaitez cr\u00e9er des virus informatique sous un format de fichier ex\u00e9cutable, le C ou le C++ sera le langage adapt\u00e9. Toutefois, son apprentissage n\u2019est pas facile. Mais si vous parvenez \u00e0 le ma\u00eetriser, vous \u00eates s\u00fbr de pouvoir coder avec les autres langages modernes de programmation. Ainsi, pour les d\u00e9butants je recommande \ud83e\udd16 : Python, la base de tout. JavaScript, pilier de la conception Web. Ruby on Rails (RoR), framework de d\u00e9veloppement Web bas\u00e9 sur Ruby, etc. Mais attention \u26a0\ufe0f, ne prenez pas go\u00fbt \u00e0 la programmation en blocs comme : Scratch","title":"langages les plus utilis\u00e9s"},{"location":"most%20used%20langage/#top-10-langages-de-programmation-les-plus-utilises-en-2022","text":"","title":"Top 10 langages de programmation les plus utilis\u00e9s en 2022 \ud83d\udc31\u200d\ud83d\udcbb"},{"location":"most%20used%20langage/#1-javascript-le-plus-utilise-cote-client","text":"M\u00eame si le HTML et le CSS sont tr\u00e8s utilis\u00e9s pour le d\u00e9veloppement Web, JavaScript reste un langage tr\u00e8s populaire et tr\u00e8s demand\u00e9. La principale raison, c\u2019est qu\u2019il est polyvalent et peut \u00eatre utilis\u00e9 pour divers projets : applications mobiles, serveurs, sites web, etc. Pour la cr\u00e9ation des sites Web, JavaScript est principalement utilis\u00e9 pour cr\u00e9er des visuels tr\u00e8s attractifs et des \u00e9l\u00e9ments interactifs c\u00f4t\u00e9 client. Un de ses principaux atouts est qu\u2019il permet de modifier les donn\u00e9es affich\u00e9es aux utilisateurs directement dans un navigateur. \u00c0 ce jour, aucun concurrent s\u00e9rieux n\u2019existe encore pour ces deux derni\u00e8res fonctions. Par ailleurs, ce langage de programmation est utilis\u00e9 dans le d\u00e9veloppement des jeux vid\u00e9o sur navigateur. Ceci est surtout possible gr\u00e2ce aux biblioth\u00e8ques graphiques 2D et 3D ainsi que les fonctionnalit\u00e9s avanc\u00e9es de HTML5. Enfin, on se rend compte que ce langage n\u2019est pas pr\u00eat de dispara\u00eetre. Il est d\u2019ailleurs facile \u00e0 apprendre et ne n\u00e9cessite aucune compilation.","title":"1. JavaScript : le plus utilis\u00e9 c\u00f4t\u00e9 client"},{"location":"most%20used%20langage/#2-python-le-plus-facile-pour-debuter-le-developpement","text":"Aujourd\u2019hui, Python repr\u00e9sente un langage incontournable en d\u00e9veloppement informatique. Rares sont les d\u00e9veloppeurs qui peuvent affirmer ne pas pouvoir coder en Python. C\u2019est d\u2019ailleurs le langage avec lequel commence la majorit\u00e9 des d\u00e9butants en code informatique. La principale raison est que ce langage dispose d\u2019une syntaxe facile \u00e0 comprendre et \u00e0 retenir, en plus d\u2019\u00eatre un logiciel libre. Ce langage de coding dispose par ailleurs d\u2019une communaut\u00e9 tr\u00e8s active qui ne cesse de grandir. Python est un langage de code tr\u00e8s \u00e9conomique en ressources et en temps. Sa polyvalence a aussi contribu\u00e9 \u00e0 sa notori\u00e9t\u00e9. Il peut en effet \u00eatre utilis\u00e9 pour concevoir de nombreuses choses : logiciels big data, d\u00e9veloppement web, cr\u00e9ation de jeux vid\u00e9o, intelligence artificielle, etc. Les d\u00e9veloppeurs qui ma\u00eetrisent parfaitement ce langage sont tr\u00e8s recherch\u00e9s sur le march\u00e9. Selon Payscale, ces derniers peuvent toucher jusqu\u2019\u00e0 68.000 euros par an.","title":"2. Python : le plus facile pour d\u00e9buter le d\u00e9veloppement"},{"location":"most%20used%20langage/#3-java-le-plus-connu-de-tous","text":"Java ressemble \u00e0 JavaScript, mais tenez-vous bien, les deux sont bien diff\u00e9rents. Java est un langage de programmation \u00e0 usage g\u00e9n\u00e9ral et orient\u00e9 objet. Il est con\u00e7u de telle sorte \u00e0 pouvoir \u00eatre ex\u00e9cut\u00e9 sans \u00eatre m\u00e9lang\u00e9 \u00e0 un autre langage. Java est un ancien langage qui a permis de cr\u00e9er les premiers jeux mobiles. Aujourd\u2019hui, il n\u2019est plus aussi pr\u00e9sent dans le Gaming, mais il continue \u00e0 jouer un r\u00f4le majeur puisqu\u2019il a permis la conception de nombreux frameworks. Au-del\u00e0 des jeux, ce langage informatique permet de concevoir des logiciels pour appareils mobiles, les sites web, l\u2019internet des objets, ou encore pour cr\u00e9er des jeux vid\u00e9o etc. Malgr\u00e9 son anciennet\u00e9, Java reste tr\u00e8s appr\u00e9ci\u00e9 des d\u00e9veloppeurs. C\u2019est en effet un langage s\u00e9curis\u00e9, mais difficile \u00e0 apprendre.","title":"3. Java : le plus connu de tous"},{"location":"most%20used%20langage/#4-go-lalternative-a-java-creee-par-google","text":"La r\u00e9volution de l\u2019internet battait son plein au d\u00e9but du XXIe si\u00e8cle. Les jeunes s\u2019int\u00e9ressaient de plus en plus \u00e0 la programmation. Malheureusement, les langages populaires \u00e0 l\u2019\u00e9poque \u00e9taient difficiles \u00e0 cerner aux d\u00e9butants et il fallait adoucir les choses. C\u2019est dans cette optique qu\u2019une \u00e9quipe de Google lance en 2009 le langage Go. Go est un langage de programmation compil\u00e9 et imp\u00e9ratif. \u00c0 la base, il \u00e9tait destin\u00e9 au d\u00e9veloppement de sites web. Ainsi Go a servi \u00e0 la cr\u00e9ation des sites de g\u00e9ants tels que Facebook et BBC. Depuis, sa plateforme s\u2019est \u00e9largie pour s\u2019\u00e9tendre aux grands syst\u00e8mes, aux scripts ou encore aux applications. Si de nombreux d\u00e9veloppeurs privil\u00e9gient ce langage, c\u2019est principalement \u00e0 cause de sa performance. Il est l\u00e9ger, rapide pour la programmation \u00e0 grande \u00e9chelle et tr\u00e8s facile \u00e0 apprendre. \u00c0 part cela, Go est moins flexible et ses ressources sont tr\u00e8s rares.","title":"4. Go : l\u2019alternative \u00e0 Java cr\u00e9\u00e9e par Google"},{"location":"most%20used%20langage/#5-ruby-facile-a-apprendre-mais-lent","text":"Ma\u00eetriser les fonctions pour \u00e9crire plus facilement les codes est le plus grand d\u00e9fi des d\u00e9veloppeurs. Quelques sp\u00e9cialistes ont voulu donc arranger les choses en cr\u00e9ant Ruby. Il s\u2019agit d\u2019un langage tr\u00e8s simple avec une syntaxe concise qui permet de d\u00e9velopper plus facilement. En back end comme en front end, ce langage fonctionne normalement. On l\u2019utilise pour du d\u00e9veloppement web, la cr\u00e9ation des applications web, des interfaces graphiques\u2026 Il n\u2019y a que sa lenteur qui est d\u00e9cri\u00e9e. Malgr\u00e9 qu\u2019il est enti\u00e8rement \u00e9crit en anglais, le langage Ruby ne pr\u00e9sente aucune difficult\u00e9. De m\u00eame, sa syntaxe est facile \u00e0 apprendre. \u00c0 cet effet, il est adapt\u00e9 pour un d\u00e9butant en d\u00e9veloppement en informatique. Il est vrai qu\u2019il manque encore de popularit\u00e9, mais la communaut\u00e9 qui s\u2019est form\u00e9e autour reste dynamique.","title":"5. Ruby : facile \u00e0 apprendre mais lent"},{"location":"most%20used%20langage/#6-typescript-le-langage-libre-et-open-source","text":"TypeScript est le langage informatique le plus r\u00e9cent de cette liste, puisqu\u2019il a vu le jour en 2012, sous l\u2019\u00e9gide de Microsoft. Libre et open source, il a \u00e9t\u00e9 cr\u00e9\u00e9 en vue de corriger les d\u00e9fauts de JavaScript. Il s\u2019agit d\u2019un langage dynamique, dont le code est transcompil\u00e9 en JavaScript. Ceci lui permet d\u2019\u00eatre d\u00e9chiffr\u00e9 par n\u2019importe quel navigateur. Que vous soyez un d\u00e9butant ou un pro de la programmation, sachez qu\u2019il est tr\u00e8s facile de coder en TypeScript. Vous pouvez vous en servir pour programmer des logiciels, des sites web, des applications web, etc.","title":"6. TypeScript : le langage libre et open source"},{"location":"most%20used%20langage/#7-c-lun-des-plus-complexes-a-apprendre-pour-la-programmation-informatique","text":"La premi\u00e8re version de ce langage informatique a vu le jour en 1983. Elle a \u00e9t\u00e9 l\u2019\u0153uvre de Bjarne Stroustrup. \u00c0 l\u2019\u00e9poque, C++ a \u00e9t\u00e9 con\u00e7u pour pallier les lacunes du tr\u00e8s ancien C. C\u2019est donc \u00e0 juste titre qu\u2019il a vol\u00e9 la vedette \u00e0 ce dernier pour devenir aujourd\u2019hui un des langages les plus utilis\u00e9s pour concevoir les applications. C++ est reconnu comme un langage tr\u00e8s complexe, mais surtout performant. Les d\u00e9veloppeurs s\u2019en servent pour travailler sous diff\u00e9rents paradigmes. \u00c0 titre d\u2019exemple, il est utilis\u00e9 dans la programmation orient\u00e9e objet, la programmation proc\u00e9durale, etc. Bref, vous comprenez qu\u2019on peut utiliser ce langage pour faire un peu de tout : applications mobiles, logiciels, jeux vid\u00e9o, iOT, navigateurs web, syst\u00e8me d\u2019exploitation\u2026 C++, c\u2019est la polyvalence en un mot. Cependant, il est extr\u00eamement difficile \u00e0 apprendre pour les d\u00e9butants. Si vous commencez en programmation, ce langage n\u2019est pas l\u2019id\u00e9al pour vous.","title":"7. C++ : l\u2019un des plus complexes \u00e0 apprendre pour la programmation informatique"},{"location":"most%20used%20langage/#8-php-le-plus-populaire-pour-creer-des-sites-web","text":"On l\u2019a cru mort \u00e0 une certaine \u00e9poque, mais le vieux PHP est revenu plus rajeuni depuis sa version 5.x. PHP est un langage informatique \u00e0 usage g\u00e9n\u00e9ral utilis\u00e9 c\u00f4t\u00e9 serveur. \u00c0 ce jour, il reste le langage le plus utilis\u00e9 sur le web, puisque 79% des sites web l\u2019utilisent. Pourquoi donc ? PHP a servi \u00e0 r\u00e9aliser des projets colossaux, \u00e0 l\u2019image de WordPress. N\u2019importe quel site qui est con\u00e7u avec ce CMS l\u2019utilise donc. M\u00eame s\u2019il a longtemps \u00e9t\u00e9 d\u00e9cri\u00e9 pour sa lenteur, PHP reste un langage puissant utilis\u00e9 pour assurer la stabilit\u00e9 d\u2019un site web. On l\u2019utilise \u00e9galement pour concevoir des plug-ins aux nombreux sites qui tournent sous WordPress. Il est connect\u00e9 \u00e0 une base de donn\u00e9es SQL qui peut \u00eatre facilement administrable via mySQL. En ce qui concerne son apprentissage, PHP est tr\u00e8s facile, \u00e0 l\u2019image du HTML et CSS. Et c\u2019est l\u00e0 tout son pi\u00e8ge. En raison de sa facilit\u00e9, les d\u00e9butants ont tendance \u00e0 le coder avec n\u00e9gligence. Cons\u00e9quence : des erreurs de compilation.","title":"8. PHP : le plus populaire pour cr\u00e9er des sites web"},{"location":"most%20used%20langage/#9-c-flexible-et-puissant","text":"Tout comme le C++, le langage de programmation C# a vu le jour pour tenter de corriger les failles du C qui se faisait vieux et pour le rendre moderne. Mais au contraire du C++ plus complexe, C# est tr\u00e8s facile et tout aussi polyvalent. Ce dernier est \u00e9galement tr\u00e8s proche de Java \u00e0 qui il a emprunt\u00e9 sa syntaxe. C\u2019est en 2001 qu\u2019il a vu le jour sous la houlette de Microsoft. Le g\u00e9ant de l\u2019informatique a initialement con\u00e7u C# pour le d\u00e9veloppement sur sa plateforme .Net. Toutefois, il s\u2019agit d\u2019un langage multiplateforme. On peut ainsi s\u2019en servir pour le d\u00e9veloppement des logiciels, des applications web, des widgets, la conception de jeux vid\u00e9o, etc. Enfin, comparativement \u00e0 C++, C# reste un langage mod\u00e9r\u00e9ment facile \u00e0 apprendre. Si vous \u00eates d\u00e9butant et que vous avez de l\u2019endurance, vous pouvez vous y lancer. Mais si vous \u00eates un pro qui recherche de la puissance pour programmer, vaut mieux vous tourner vers le C++.","title":"9. C# : flexible et puissant"},{"location":"most%20used%20langage/#10-c-le-plus-vieux-langage-toujours-utilise","text":"Aussi vieux (presque) que la programmation informatique, C est un langage informatique imp\u00e9ratif. Il a inspir\u00e9 de nombreux langages modernes et reste utilis\u00e9 par de nombreux d\u00e9veloppeurs, malgr\u00e9 son anciennet\u00e9. La raison, c\u2019est qu\u2019il est beaucoup plus simple et permet de d\u00e9velopper des applications capables de tourner sous plusieurs plateformes. C'est utilis\u00e9 pour d\u00e9velopper des logiciels, des syst\u00e8mes d\u2019exploitation, etc. Si vous souhaitez cr\u00e9er des virus informatique sous un format de fichier ex\u00e9cutable, le C ou le C++ sera le langage adapt\u00e9. Toutefois, son apprentissage n\u2019est pas facile. Mais si vous parvenez \u00e0 le ma\u00eetriser, vous \u00eates s\u00fbr de pouvoir coder avec les autres langages modernes de programmation. Ainsi, pour les d\u00e9butants je recommande \ud83e\udd16 : Python, la base de tout. JavaScript, pilier de la conception Web. Ruby on Rails (RoR), framework de d\u00e9veloppement Web bas\u00e9 sur Ruby, etc. Mais attention \u26a0\ufe0f, ne prenez pas go\u00fbt \u00e0 la programmation en blocs comme : Scratch","title":"10. C : le plus vieux langage toujours utilis\u00e9"}]}